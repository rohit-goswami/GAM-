import { Finding, getEthersProvider, HandleTransaction, TransactionEvent } from "forta-agent";
import { Trace } from "forta-agent/dist/sdk/trace";
import LRU from "lru-cache";
import { FindingGenerator } from "./utils";

const provider = getEthersProvider();
export default function provideTornadoExploiterHandler(
  findingGenerator: FindingGenerator,
  tornadoAddresses: string[],
  withdrawalEventAbi: string,
  suspiciousHexStrings: string[]
): HandleTransaction {
  const tornadoFundedAddresses: LRU<string, boolean> = new LRU({ max: 1000000 });
  return async (txEvent: TransactionEvent): Promise<Finding[]> => {
    const findings: Finding[] = [];
    let result;

    const tornadoWithdrawalsEvents = tornadoAddresses
      .map((tornadoAddress: string) => txEvent.filterLog(withdrawalEventAbi, tornadoAddress))
      .flat();

    tornadoWithdrawalsEvents.forEach((tornadoWithdrawal) => {
      tornadoFundedAddresses.set(tornadoWithdrawal.args["to"].toLowerCase(), true);
    });

    let contractAddress: string | null = txEvent.contractAddress;

    if (contractAddress !== null) {
      const bytecode: string = await provider.getCode(contractAddress);
      result = suspiciousHexStrings.some((el) => bytecode.includes(el));
      console.log(result);
    }

    for (let i = 0; i < txEvent.traces.length; ++i) {
      const trace: Trace = txEvent.traces[i];
      if (
        (trace.type === "create" && tornadoFundedAddresses.get(trace.action.from)) ||
        (trace.type === "create" && result)
      ) {
        if (contractAddress !== null) findings.push(findingGenerator({ from: trace.action.from, contractAddress }));
      }
    }
    return findings;
  };
}
